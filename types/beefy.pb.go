// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.1
// source: v1/beefy.proto

package types

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RelayChain int32

const (
	RelayChain_POLKADOT RelayChain = 0
	RelayChain_KUSAMA   RelayChain = 1
	RelayChain_ROCOCO   RelayChain = 2
)

// Enum value maps for RelayChain.
var (
	RelayChain_name = map[int32]string{
		0: "POLKADOT",
		1: "KUSAMA",
		2: "ROCOCO",
	}
	RelayChain_value = map[string]int32{
		"POLKADOT": 0,
		"KUSAMA":   1,
		"ROCOCO":   2,
	}
)

func (x RelayChain) Enum() *RelayChain {
	p := new(RelayChain)
	*p = x
	return p
}

func (x RelayChain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelayChain) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_beefy_proto_enumTypes[0].Descriptor()
}

func (RelayChain) Type() protoreflect.EnumType {
	return &file_v1_beefy_proto_enumTypes[0]
}

func (x RelayChain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelayChain.Descriptor instead.
func (RelayChain) EnumDescriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{0}
}

// ClientState from Beefy tracks the current validator set, latest height,
// and a possible frozen height.
type ClientState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latest mmr root hash
	MmrRootHash []byte `protobuf:"bytes,1,opt,name=mmr_root_hash,json=mmrRootHash,proto3" json:"mmr_root_hash,omitempty"`
	// block number for the latest mmr_root_hash
	LatestBeefyHeight uint32 `protobuf:"varint,2,opt,name=latest_beefy_height,json=latestBeefyHeight,proto3" json:"latest_beefy_height,omitempty"`
	// Block height when the client was frozen due to a misbehaviour
	FrozenHeight uint64 `protobuf:"varint,3,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty"`
	/// Known relay chains
	RelayChain RelayChain `protobuf:"varint,4,opt,name=relay_chain,json=relayChain,proto3,enum=beefy.v1.RelayChain" json:"relay_chain,omitempty"`
	/// ParaId of associated parachain
	ParaId uint32 `protobuf:"varint,5,opt,name=para_id,json=paraId,proto3" json:"para_id,omitempty"`
	/// latest parachain height
	LatestParaHeight uint32 `protobuf:"varint,6,opt,name=latest_para_height,json=latestParaHeight,proto3" json:"latest_para_height,omitempty"`
	// block number that the beefy protocol was activated on the relay chain.
	// This should be the first block in the merkle-mountain-range tree.
	BeefyActivationBlock uint32 `protobuf:"varint,7,opt,name=beefy_activation_block,json=beefyActivationBlock,proto3" json:"beefy_activation_block,omitempty"`
	// authorities for the current round
	Authority *BeefyAuthoritySet `protobuf:"bytes,8,opt,name=authority,proto3" json:"authority,omitempty"`
	// authorities for the next round
	NextAuthoritySet *BeefyAuthoritySet `protobuf:"bytes,9,opt,name=next_authority_set,json=nextAuthoritySet,proto3" json:"next_authority_set,omitempty"`
}

func (x *ClientState) Reset() {
	*x = ClientState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientState) ProtoMessage() {}

func (x *ClientState) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientState.ProtoReflect.Descriptor instead.
func (*ClientState) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{0}
}

func (x *ClientState) GetMmrRootHash() []byte {
	if x != nil {
		return x.MmrRootHash
	}
	return nil
}

func (x *ClientState) GetLatestBeefyHeight() uint32 {
	if x != nil {
		return x.LatestBeefyHeight
	}
	return 0
}

func (x *ClientState) GetFrozenHeight() uint64 {
	if x != nil {
		return x.FrozenHeight
	}
	return 0
}

func (x *ClientState) GetRelayChain() RelayChain {
	if x != nil {
		return x.RelayChain
	}
	return RelayChain_POLKADOT
}

func (x *ClientState) GetParaId() uint32 {
	if x != nil {
		return x.ParaId
	}
	return 0
}

func (x *ClientState) GetLatestParaHeight() uint32 {
	if x != nil {
		return x.LatestParaHeight
	}
	return 0
}

func (x *ClientState) GetBeefyActivationBlock() uint32 {
	if x != nil {
		return x.BeefyActivationBlock
	}
	return 0
}

func (x *ClientState) GetAuthority() *BeefyAuthoritySet {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *ClientState) GetNextAuthoritySet() *BeefyAuthoritySet {
	if x != nil {
		return x.NextAuthoritySet
	}
	return nil
}

// Actual payload items
type PayloadItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 2-byte payload id
	PayloadId []byte `protobuf:"bytes,1,opt,name=payload_id,json=payloadId,proto3" json:"payload_id,omitempty"`
	// arbitrary length payload data., eg mmr_root_hash
	PayloadData []byte `protobuf:"bytes,2,opt,name=payload_data,json=payloadData,proto3" json:"payload_data,omitempty"`
}

func (x *PayloadItem) Reset() {
	*x = PayloadItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadItem) ProtoMessage() {}

func (x *PayloadItem) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadItem.ProtoReflect.Descriptor instead.
func (*PayloadItem) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{1}
}

func (x *PayloadItem) GetPayloadId() []byte {
	if x != nil {
		return x.PayloadId
	}
	return nil
}

func (x *PayloadItem) GetPayloadData() []byte {
	if x != nil {
		return x.PayloadData
	}
	return nil
}

// Commitment message signed by beefy validators
type Commitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// array of payload items signed by Beefy validators
	Payload []*PayloadItem `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty"`
	// block number for this commitment
	BlockNumer uint32 `protobuf:"varint,2,opt,name=block_numer,json=blockNumer,proto3" json:"block_numer,omitempty"`
	// validator set that signed this commitment
	ValidatorSetId uint64 `protobuf:"varint,3,opt,name=validator_set_id,json=validatorSetId,proto3" json:"validator_set_id,omitempty"`
}

func (x *Commitment) Reset() {
	*x = Commitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commitment) ProtoMessage() {}

func (x *Commitment) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commitment.ProtoReflect.Descriptor instead.
func (*Commitment) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{2}
}

func (x *Commitment) GetPayload() []*PayloadItem {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Commitment) GetBlockNumer() uint32 {
	if x != nil {
		return x.BlockNumer
	}
	return 0
}

func (x *Commitment) GetValidatorSetId() uint64 {
	if x != nil {
		return x.ValidatorSetId
	}
	return 0
}

// Signature belonging to a single validator
type CommitmentSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// actual signature bytes
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// authority leaf index in the merkle tree.
	AuthorityIndex uint32 `protobuf:"varint,2,opt,name=authority_index,json=authorityIndex,proto3" json:"authority_index,omitempty"`
}

func (x *CommitmentSignature) Reset() {
	*x = CommitmentSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitmentSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitmentSignature) ProtoMessage() {}

func (x *CommitmentSignature) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitmentSignature.ProtoReflect.Descriptor instead.
func (*CommitmentSignature) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{3}
}

func (x *CommitmentSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CommitmentSignature) GetAuthorityIndex() uint32 {
	if x != nil {
		return x.AuthorityIndex
	}
	return 0
}

// signed commitment data
type SignedCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commitment data being signed
	Commitment *Commitment `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// gotten from rpc subscription
	Signatures []*CommitmentSignature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SignedCommitment) Reset() {
	*x = SignedCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedCommitment) ProtoMessage() {}

func (x *SignedCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedCommitment.ProtoReflect.Descriptor instead.
func (*SignedCommitment) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{4}
}

func (x *SignedCommitment) GetCommitment() *Commitment {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *SignedCommitment) GetSignatures() []*CommitmentSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// data needed to update the client
type ClientStateUpdateProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the new mmr leaf SCALE encoded.
	MmrLeaf *BeefyMmrLeaf `protobuf:"bytes,1,opt,name=mmr_leaf,json=mmrLeaf,proto3" json:"mmr_leaf,omitempty"`
	// leaf index for the mmr_leaf
	MmrLeafIndex uint64 `protobuf:"varint,2,opt,name=mmr_leaf_index,json=mmrLeafIndex,proto3" json:"mmr_leaf_index,omitempty"`
	// proof that this mmr_leaf index is valid.
	MmrProof [][]byte `protobuf:"bytes,3,rep,name=mmr_proof,json=mmrProof,proto3" json:"mmr_proof,omitempty"`
	// signed commitment data
	SignedCommitment *SignedCommitment `protobuf:"bytes,4,opt,name=signed_commitment,json=signedCommitment,proto3" json:"signed_commitment,omitempty"`
	// generated using full authority list from runtime
	AuthoritiesProof [][]byte `protobuf:"bytes,5,rep,name=authorities_proof,json=authoritiesProof,proto3" json:"authorities_proof,omitempty"`
}

func (x *ClientStateUpdateProof) Reset() {
	*x = ClientStateUpdateProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStateUpdateProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStateUpdateProof) ProtoMessage() {}

func (x *ClientStateUpdateProof) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStateUpdateProof.ProtoReflect.Descriptor instead.
func (*ClientStateUpdateProof) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{5}
}

func (x *ClientStateUpdateProof) GetMmrLeaf() *BeefyMmrLeaf {
	if x != nil {
		return x.MmrLeaf
	}
	return nil
}

func (x *ClientStateUpdateProof) GetMmrLeafIndex() uint64 {
	if x != nil {
		return x.MmrLeafIndex
	}
	return 0
}

func (x *ClientStateUpdateProof) GetMmrProof() [][]byte {
	if x != nil {
		return x.MmrProof
	}
	return nil
}

func (x *ClientStateUpdateProof) GetSignedCommitment() *SignedCommitment {
	if x != nil {
		return x.SignedCommitment
	}
	return nil
}

func (x *ClientStateUpdateProof) GetAuthoritiesProof() [][]byte {
	if x != nil {
		return x.AuthoritiesProof
	}
	return nil
}

// ConsensusState defines the consensus state from Tendermint.
type ConsensusState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp that corresponds to the block height in which the ConsensusState
	// was stored.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// packet commitment root
	Root []byte `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *ConsensusState) Reset() {
	*x = ConsensusState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusState) ProtoMessage() {}

func (x *ConsensusState) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusState.ProtoReflect.Descriptor instead.
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{6}
}

func (x *ConsensusState) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ConsensusState) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

// Misbehaviour is a wrapper over two conflicting Headers
// that implements Misbehaviour interface expected by ICS-02
type Misbehaviour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header_1 *Header `protobuf:"bytes,2,opt,name=header_1,json=header1,proto3" json:"header_1,omitempty"`
	Header_2 *Header `protobuf:"bytes,3,opt,name=header_2,json=header2,proto3" json:"header_2,omitempty"`
}

func (x *Misbehaviour) Reset() {
	*x = Misbehaviour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Misbehaviour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Misbehaviour) ProtoMessage() {}

func (x *Misbehaviour) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Misbehaviour.ProtoReflect.Descriptor instead.
func (*Misbehaviour) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{7}
}

func (x *Misbehaviour) GetHeader_1() *Header {
	if x != nil {
		return x.Header_1
	}
	return nil
}

func (x *Misbehaviour) GetHeader_2() *Header {
	if x != nil {
		return x.Header_2
	}
	return nil
}

// Header contains the neccessary data to prove finality about IBC commitments
type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional payload to update ConsensusState
	ConsensusState *ConsensusStateUpdateProof `protobuf:"bytes,1,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty"`
	// optional payload to update the ClientState.
	ClientState *ClientStateUpdateProof `protobuf:"bytes,2,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{8}
}

func (x *Header) GetConsensusState() *ConsensusStateUpdateProof {
	if x != nil {
		return x.ConsensusState
	}
	return nil
}

func (x *Header) GetClientState() *ClientStateUpdateProof {
	if x != nil {
		return x.ClientState
	}
	return nil
}

/// Parachain headers and their mmr proofs.
type ConsensusStateUpdateProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parachain headers needed for proofs and ConsensusState
	ParachainHeaders []*ParachainHeader `protobuf:"bytes,1,rep,name=parachain_headers,json=parachainHeaders,proto3" json:"parachain_headers,omitempty"`
	// mmr proofs for the headers gotten from rpc "mmr_generateProofs"
	MmrProofs [][]byte `protobuf:"bytes,2,rep,name=mmr_proofs,json=mmrProofs,proto3" json:"mmr_proofs,omitempty"`
	// size of the mmr for the given proof
	MmrSize uint64 `protobuf:"varint,3,opt,name=mmr_size,json=mmrSize,proto3" json:"mmr_size,omitempty"`
}

func (x *ConsensusStateUpdateProof) Reset() {
	*x = ConsensusStateUpdateProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusStateUpdateProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusStateUpdateProof) ProtoMessage() {}

func (x *ConsensusStateUpdateProof) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusStateUpdateProof.ProtoReflect.Descriptor instead.
func (*ConsensusStateUpdateProof) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{9}
}

func (x *ConsensusStateUpdateProof) GetParachainHeaders() []*ParachainHeader {
	if x != nil {
		return x.ParachainHeaders
	}
	return nil
}

func (x *ConsensusStateUpdateProof) GetMmrProofs() [][]byte {
	if x != nil {
		return x.MmrProofs
	}
	return nil
}

func (x *ConsensusStateUpdateProof) GetMmrSize() uint64 {
	if x != nil {
		return x.MmrSize
	}
	return 0
}

// data needed to prove parachain header inclusion in mmr.
type ParachainHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scale-encoded parachain header bytes
	ParachainHeader []byte `protobuf:"bytes,1,opt,name=parachain_header,json=parachainHeader,proto3" json:"parachain_header,omitempty"`
	// see beefy spec
	MmrLeafPartial *BeefyMmrLeafPartial `protobuf:"bytes,2,opt,name=mmr_leaf_partial,json=mmrLeafPartial,proto3" json:"mmr_leaf_partial,omitempty"`
	// proofs for our header in the parachain heads root
	ParachainHeadsProof [][]byte `protobuf:"bytes,3,rep,name=parachain_heads_proof,json=parachainHeadsProof,proto3" json:"parachain_heads_proof,omitempty"`
	// leaf index for parachain heads proof
	HeadsLeafIndex uint32 `protobuf:"varint,4,opt,name=heads_leaf_index,json=headsLeafIndex,proto3" json:"heads_leaf_index,omitempty"`
	// total number of para heads in parachain_heads_root
	HeadsTotalCount uint32 `protobuf:"varint,5,opt,name=heads_total_count,json=headsTotalCount,proto3" json:"heads_total_count,omitempty"`
	// trie merkle proof of inclusion in header.extrinsic_root
	ExtrinsicProof [][]byte `protobuf:"bytes,6,rep,name=extrinsic_proof,json=extrinsicProof,proto3" json:"extrinsic_proof,omitempty"`
	// the actual timestamp extrinsic
	TimestampExtrinsic []byte `protobuf:"bytes,7,opt,name=timestamp_extrinsic,json=timestampExtrinsic,proto3" json:"timestamp_extrinsic,omitempty"`
}

func (x *ParachainHeader) Reset() {
	*x = ParachainHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParachainHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParachainHeader) ProtoMessage() {}

func (x *ParachainHeader) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParachainHeader.ProtoReflect.Descriptor instead.
func (*ParachainHeader) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{10}
}

func (x *ParachainHeader) GetParachainHeader() []byte {
	if x != nil {
		return x.ParachainHeader
	}
	return nil
}

func (x *ParachainHeader) GetMmrLeafPartial() *BeefyMmrLeafPartial {
	if x != nil {
		return x.MmrLeafPartial
	}
	return nil
}

func (x *ParachainHeader) GetParachainHeadsProof() [][]byte {
	if x != nil {
		return x.ParachainHeadsProof
	}
	return nil
}

func (x *ParachainHeader) GetHeadsLeafIndex() uint32 {
	if x != nil {
		return x.HeadsLeafIndex
	}
	return 0
}

func (x *ParachainHeader) GetHeadsTotalCount() uint32 {
	if x != nil {
		return x.HeadsTotalCount
	}
	return 0
}

func (x *ParachainHeader) GetExtrinsicProof() [][]byte {
	if x != nil {
		return x.ExtrinsicProof
	}
	return nil
}

func (x *ParachainHeader) GetTimestampExtrinsic() []byte {
	if x != nil {
		return x.TimestampExtrinsic
	}
	return nil
}

// Partial data for MmrLeaf
type BeefyMmrLeafPartial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// leaf version
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// parent block for this leaf
	ParentNumber uint32 `protobuf:"varint,2,opt,name=parent_number,json=parentNumber,proto3" json:"parent_number,omitempty"`
	// parent hash for this leaf
	ParentHash []byte `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// next authority set.
	BeefyNextAuthoritySet *BeefyAuthoritySet `protobuf:"bytes,4,opt,name=beefy_next_authority_set,json=beefyNextAuthoritySet,proto3" json:"beefy_next_authority_set,omitempty"`
}

func (x *BeefyMmrLeafPartial) Reset() {
	*x = BeefyMmrLeafPartial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeefyMmrLeafPartial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeefyMmrLeafPartial) ProtoMessage() {}

func (x *BeefyMmrLeafPartial) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeefyMmrLeafPartial.ProtoReflect.Descriptor instead.
func (*BeefyMmrLeafPartial) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{11}
}

func (x *BeefyMmrLeafPartial) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BeefyMmrLeafPartial) GetParentNumber() uint32 {
	if x != nil {
		return x.ParentNumber
	}
	return 0
}

func (x *BeefyMmrLeafPartial) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *BeefyMmrLeafPartial) GetBeefyNextAuthoritySet() *BeefyAuthoritySet {
	if x != nil {
		return x.BeefyNextAuthoritySet
	}
	return nil
}

// Beefy Authority Info
type BeefyAuthoritySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the authority set, it should be strictly increasing
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// size of the authority set
	Len uint32 `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	// merkle root of the sorted authority public keys.
	AuthorityRoot []byte `protobuf:"bytes,3,opt,name=authority_root,json=authorityRoot,proto3" json:"authority_root,omitempty"`
}

func (x *BeefyAuthoritySet) Reset() {
	*x = BeefyAuthoritySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeefyAuthoritySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeefyAuthoritySet) ProtoMessage() {}

func (x *BeefyAuthoritySet) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeefyAuthoritySet.ProtoReflect.Descriptor instead.
func (*BeefyAuthoritySet) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{12}
}

func (x *BeefyAuthoritySet) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BeefyAuthoritySet) GetLen() uint32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *BeefyAuthoritySet) GetAuthorityRoot() []byte {
	if x != nil {
		return x.AuthorityRoot
	}
	return nil
}

// BeefyMmrLeaf leaf data
type BeefyMmrLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// leaf version
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// parent block for this leaf
	ParentNumber uint32 `protobuf:"varint,2,opt,name=parent_number,json=parentNumber,proto3" json:"parent_number,omitempty"`
	// parent hash for this leaf
	ParentHash []byte `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// beefy next authority set.
	BeefyNextAuthoritySet *BeefyAuthoritySet `protobuf:"bytes,4,opt,name=beefy_next_authority_set,json=beefyNextAuthoritySet,proto3" json:"beefy_next_authority_set,omitempty"`
	// merkle root hash of parachain heads included in the leaf.
	ParachainHeads []byte `protobuf:"bytes,5,opt,name=parachain_heads,json=parachainHeads,proto3" json:"parachain_heads,omitempty"`
}

func (x *BeefyMmrLeaf) Reset() {
	*x = BeefyMmrLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_beefy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeefyMmrLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeefyMmrLeaf) ProtoMessage() {}

func (x *BeefyMmrLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_v1_beefy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeefyMmrLeaf.ProtoReflect.Descriptor instead.
func (*BeefyMmrLeaf) Descriptor() ([]byte, []int) {
	return file_v1_beefy_proto_rawDescGZIP(), []int{13}
}

func (x *BeefyMmrLeaf) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BeefyMmrLeaf) GetParentNumber() uint32 {
	if x != nil {
		return x.ParentNumber
	}
	return 0
}

func (x *BeefyMmrLeaf) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *BeefyMmrLeaf) GetBeefyNextAuthoritySet() *BeefyAuthoritySet {
	if x != nil {
		return x.BeefyNextAuthoritySet
	}
	return nil
}

func (x *BeefyMmrLeaf) GetParachainHeads() []byte {
	if x != nil {
		return x.ParachainHeads
	}
	return nil
}

var File_v1_beefy_proto protoreflect.FileDescriptor

var file_v1_beefy_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67,
	0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc6, 0x03, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6d, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x6d, 0x72, 0x52, 0x6f, 0x6f,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x62, 0x65, 0x65, 0x66, 0x79, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x65, 0x65, 0x66, 0x79, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x65, 0x65, 0x66,
	0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x65, 0x65, 0x66, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x65,
	0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x12, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x65, 0x65, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x74, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x65, 0x0a, 0x0b, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xda,
	0xde, 0x1f, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x32, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x04, 0x88, 0xa0, 0x1f,
	0x00, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x49, 0x64, 0x3a, 0x04, 0x88, 0xa0,
	0x1f, 0x00, 0x22, 0x62, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x8a, 0x02, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x65, 0x65, 0x66, 0x79, 0x4d, 0x6d, 0x72, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x07, 0x6d, 0x6d, 0x72,
	0x4c, 0x65, 0x61, 0x66, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x66,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x6d,
	0x72, 0x4c, 0x65, 0x61, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6d,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x6d,
	0x6d, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x3a, 0x04, 0x88,
	0xa0, 0x1f, 0x00, 0x22, 0x6e, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x3a, 0x04, 0x88,
	0xa0, 0x1f, 0x00, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x75, 0x72, 0x12, 0x4b, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x1e, 0xe2, 0xde, 0x1f, 0x07, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x31, 0xf2, 0xde, 0x1f, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x31, 0x22, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x31, 0x12, 0x4b, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x1e, 0xe2, 0xde, 0x1f, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x32, 0xf2, 0xde, 0x1f, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x32, 0x22, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x32, 0x3a, 0x04,
	0x88, 0xa0, 0x1f, 0x00, 0x22, 0xad, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x52, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x65, 0x65, 0x66, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x66,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x04,
	0x88, 0xa0, 0x1f, 0x00, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x46, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x10, 0x70, 0x61, 0x72, 0x61, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6d,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09,
	0x6d, 0x6d, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6d, 0x72,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x6d, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x65, 0x66, 0x79, 0x4d, 0x6d,
	0x72, 0x4c, 0x65, 0x61, 0x66, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0e, 0x6d, 0x6d,
	0x72, 0x4c, 0x65, 0x61, 0x66, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x61, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13, 0x70, 0x61, 0x72,
	0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x28, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x64,
	0x73, 0x4c, 0x65, 0x61, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65,
	0x61, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e,
	0x73, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0e, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x2f, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63,
	0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0xf4, 0x01, 0x0a, 0x13, 0x42, 0x65, 0x65, 0x66, 0x79,
	0x4d, 0x6d, 0x72, 0x4c, 0x65, 0x61, 0x66, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0a, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x02, 0x55, 0x38, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0f,
	0xda, 0xde, 0x1f, 0x0b, 0x53, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x33, 0x32, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5a, 0x0a, 0x18, 0x62,
	0x65, 0x65, 0x66, 0x79, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x65, 0x66, 0x79, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x15, 0x62, 0x65, 0x65, 0x66, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0x73, 0x0a,
	0x11, 0x42, 0x65, 0x65, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6c, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0f, 0xda, 0xde,
	0x1f, 0x0b, 0x53, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x33, 0x32, 0x52, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x3a, 0x04, 0x88, 0xa0,
	0x1f, 0x00, 0x22, 0xa7, 0x02, 0x0a, 0x0c, 0x42, 0x65, 0x65, 0x66, 0x79, 0x4d, 0x6d, 0x72, 0x4c,
	0x65, 0x61, 0x66, 0x12, 0x24, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x02, 0x55, 0x38,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x0f, 0xda, 0xde, 0x1f, 0x0b, 0x53, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x33, 0x32, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x5a, 0x0a, 0x18, 0x62, 0x65, 0x65, 0x66, 0x79, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65,
	0x65, 0x66, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x15, 0x62, 0x65, 0x65, 0x66, 0x79, 0x4e, 0x65, 0x78, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0f, 0xda, 0xde, 0x1f, 0x0b, 0x53, 0x69, 0x7a, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x33, 0x32, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x48, 0x65, 0x61, 0x64, 0x73, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x2a, 0x32, 0x0a, 0x0a,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f,
	0x4c, 0x4b, 0x41, 0x44, 0x4f, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x55, 0x53, 0x41,
	0x4d, 0x41, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x4f, 0x43, 0x4f, 0x43, 0x4f, 0x10, 0x02,
	0x42, 0x43, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x2f, 0x62, 0x65, 0x65, 0x66,
	0x79, 0x2d, 0x67, 0x6f, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0xc8, 0xe2, 0x1e, 0x00, 0xd0, 0xe2, 0x1e, 0x00, 0xe0, 0xe2, 0x1e, 0x00, 0xa0, 0xe3, 0x1e,
	0x00, 0xc0, 0xe3, 0x1e, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_beefy_proto_rawDescOnce sync.Once
	file_v1_beefy_proto_rawDescData = file_v1_beefy_proto_rawDesc
)

func file_v1_beefy_proto_rawDescGZIP() []byte {
	file_v1_beefy_proto_rawDescOnce.Do(func() {
		file_v1_beefy_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_beefy_proto_rawDescData)
	})
	return file_v1_beefy_proto_rawDescData
}

var file_v1_beefy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_beefy_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_v1_beefy_proto_goTypes = []interface{}{
	(RelayChain)(0),                   // 0: beefy.v1.RelayChain
	(*ClientState)(nil),               // 1: beefy.v1.ClientState
	(*PayloadItem)(nil),               // 2: beefy.v1.PayloadItem
	(*Commitment)(nil),                // 3: beefy.v1.Commitment
	(*CommitmentSignature)(nil),       // 4: beefy.v1.CommitmentSignature
	(*SignedCommitment)(nil),          // 5: beefy.v1.SignedCommitment
	(*ClientStateUpdateProof)(nil),    // 6: beefy.v1.ClientStateUpdateProof
	(*ConsensusState)(nil),            // 7: beefy.v1.ConsensusState
	(*Misbehaviour)(nil),              // 8: beefy.v1.Misbehaviour
	(*Header)(nil),                    // 9: beefy.v1.Header
	(*ConsensusStateUpdateProof)(nil), // 10: beefy.v1.ConsensusStateUpdateProof
	(*ParachainHeader)(nil),           // 11: beefy.v1.ParachainHeader
	(*BeefyMmrLeafPartial)(nil),       // 12: beefy.v1.BeefyMmrLeafPartial
	(*BeefyAuthoritySet)(nil),         // 13: beefy.v1.BeefyAuthoritySet
	(*BeefyMmrLeaf)(nil),              // 14: beefy.v1.BeefyMmrLeaf
	(*timestamppb.Timestamp)(nil),     // 15: google.protobuf.Timestamp
}
var file_v1_beefy_proto_depIdxs = []int32{
	0,  // 0: beefy.v1.ClientState.relay_chain:type_name -> beefy.v1.RelayChain
	13, // 1: beefy.v1.ClientState.authority:type_name -> beefy.v1.BeefyAuthoritySet
	13, // 2: beefy.v1.ClientState.next_authority_set:type_name -> beefy.v1.BeefyAuthoritySet
	2,  // 3: beefy.v1.Commitment.payload:type_name -> beefy.v1.PayloadItem
	3,  // 4: beefy.v1.SignedCommitment.commitment:type_name -> beefy.v1.Commitment
	4,  // 5: beefy.v1.SignedCommitment.signatures:type_name -> beefy.v1.CommitmentSignature
	14, // 6: beefy.v1.ClientStateUpdateProof.mmr_leaf:type_name -> beefy.v1.BeefyMmrLeaf
	5,  // 7: beefy.v1.ClientStateUpdateProof.signed_commitment:type_name -> beefy.v1.SignedCommitment
	15, // 8: beefy.v1.ConsensusState.timestamp:type_name -> google.protobuf.Timestamp
	9,  // 9: beefy.v1.Misbehaviour.header_1:type_name -> beefy.v1.Header
	9,  // 10: beefy.v1.Misbehaviour.header_2:type_name -> beefy.v1.Header
	10, // 11: beefy.v1.Header.consensus_state:type_name -> beefy.v1.ConsensusStateUpdateProof
	6,  // 12: beefy.v1.Header.client_state:type_name -> beefy.v1.ClientStateUpdateProof
	11, // 13: beefy.v1.ConsensusStateUpdateProof.parachain_headers:type_name -> beefy.v1.ParachainHeader
	12, // 14: beefy.v1.ParachainHeader.mmr_leaf_partial:type_name -> beefy.v1.BeefyMmrLeafPartial
	13, // 15: beefy.v1.BeefyMmrLeafPartial.beefy_next_authority_set:type_name -> beefy.v1.BeefyAuthoritySet
	13, // 16: beefy.v1.BeefyMmrLeaf.beefy_next_authority_set:type_name -> beefy.v1.BeefyAuthoritySet
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_v1_beefy_proto_init() }
func file_v1_beefy_proto_init() {
	if File_v1_beefy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_beefy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitmentSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStateUpdateProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Misbehaviour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusStateUpdateProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParachainHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeefyMmrLeafPartial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeefyAuthoritySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_beefy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeefyMmrLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_beefy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_beefy_proto_goTypes,
		DependencyIndexes: file_v1_beefy_proto_depIdxs,
		EnumInfos:         file_v1_beefy_proto_enumTypes,
		MessageInfos:      file_v1_beefy_proto_msgTypes,
	}.Build()
	File_v1_beefy_proto = out.File
	file_v1_beefy_proto_rawDesc = nil
	file_v1_beefy_proto_goTypes = nil
	file_v1_beefy_proto_depIdxs = nil
}
